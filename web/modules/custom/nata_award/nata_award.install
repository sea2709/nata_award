<?php

use Drupal\Core\Field\BaseFieldDefinition;

function nata_award_update_8003()
{
  $field_storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Open-ended Questions Form'))
    ->setSetting('target_type', 'webform')
    ->setSetting('handler', 'default')
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('open_ended_form', 'nata_award', 'nata_award', $field_storage_definition);
}

function nata_award_update_8004()
{
  $field_storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('integer')
    ->setLabel(t('Years of certification'))
    ->setDefaultValue('')
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'string',
    ])
    ->setDisplayOptions('form', [
      'type' => 'text_textfield',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('years_of_certification', 'nata_award', 'nata_award', $field_storage_definition);
}

function nata_award_update_8005()
{
  $field_storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('string')
    ->setLabel(t('Nimble Type Id'))
    ->setRequired(TRUE)
    ->setSettings([
      'max_length' => 64,
      'text_processing' => 0,
    ])
    ->setDisplayOptions('form', [
      'type' => 'text_textfield',
    ]);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('nimble_type_id', 'nata_award', 'nata_award', $field_storage_definition);
}

function nata_award_update_8006()
{
  $field_storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('string_long')
    ->setLabel(t('Past winners JSON'))
    ->setRequired(TRUE)
    ->setSettings([
      'text_processing' => 0,
    ])
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textarea',
    ]);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('past_winners_json', 'nata_award', 'nata_award', $field_storage_definition);
}

function nata_award_update_8007()
{
  $fieldDefinitionUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $field_storage_definition = BaseFieldDefinition::create('file')
    ->setLabel('Past Winners CSV File')
    ->setSettings([
      'uri_scheme' => 'public',
      'file_directory' => 'past_winners',
      'file_extensions' => 'csv',
    ])
    ->setDisplayOptions('view', array(
      'label' => 'above',
      'type' => 'file',
    ))
    ->setDisplayOptions('form', array(
      'type' => 'file',
    ))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $fieldDefinitionUpdateManager
    ->installFieldStorageDefinition('past_winners_csv_file', 'nata_award', 'nata_award', $field_storage_definition);

  $pastWinnersJsonFieldDefinition = $fieldDefinitionUpdateManager->getFieldStorageDefinition('past_winners_json', 'nata_award');
  $fieldDefinitionUpdateManager->uninstallFieldStorageDefinition($pastWinnersJsonFieldDefinition);
}

function nata_award_update_8008()
{
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('year', 'nata_candidate');
  $field_storage_definition->setLabel(t('Year'))
    ->setSetting('target_type', 'nata_year')
    ->setSetting('handler', 'default')
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);
  $entity_definition_update_manager->updateFieldStorageDefinition($field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Award'))
    ->setSetting('target_type', 'nata_award')
    ->setSetting('handler', 'default')
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('award', 'nata_candidate', 'nata_award', $field_storage_definition);
}

function nata_award_update_8009()
{
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Name'))
    ->setRequired(TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('name', 'nata_candidate', 'nata_award', $field_storage_definition);
}

function nata_award_update_8010()
{
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Email'))
    ->setRequired(TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('email', 'nata_candidate', 'nata_award', $field_storage_definition);
}

function nata_award_update_8011()
{
  $field_storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Advocacy Help Text'))
    ->setSettings([
      'text_processing' => 1,
      'display_summary' => 0
    ])
    ->setDefaultValue('')
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'string',
    ])
    ->setDisplayOptions('form', [
      'type' => 'text_textarea',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('advocacy_help_text', 'nata_award', 'nata_award', $field_storage_definition);
}

function nata_award_update_8012()
{
  \Drupal::entityDefinitionUpdateManager()->installEntityType(new \Drupal\Core\Entity\ContentEntityType([
    'id' => 'nata_invitation',
    'label' => new \Drupal\Core\StringTranslation\TranslatableMarkup('Invitation'),
    'handlers' => [
      'views_data' => 'Drupal\views\EntityViewsData',
      'form' => [
        'default' => 'Drupal\nata_award\Form\InviteAdvocateForm',
        'delete' => 'Drupal\nata_award\Form\InvitationDeleteForm',
      ],
    ],
    'base_table' => 'nata_invitation',
    'entity_keys' => [
      'id' => 'id',
      'uuid' => 'uuid',
    ],
  ]));
}

function nata_award_update_8013() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($invitationField = $definition_update_manager->getFieldStorageDefinition('year', 'nata_invitation')) {
    $definition_update_manager->uninstallFieldStorageDefinition($invitationField);
  }
}

function nata_award_update_8014() {
  $entity_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_update_manager->getEntityType('nata_invitation');
  $entity_update_manager->uninstallEntityType($entity_type);
}

function nata_award_update_8015()
{
  \Drupal::entityDefinitionUpdateManager()->installEntityType(new \Drupal\Core\Entity\ContentEntityType([
    'id' => 'nata_invitation',
    'label' => new \Drupal\Core\StringTranslation\TranslatableMarkup('Invitation'),
    'handlers' => [
      'views_data' => 'Drupal\views\EntityViewsData',
      'form' => [
        'default' => 'Drupal\nata_award\Form\InviteAdvocateForm',
        'delete' => 'Drupal\nata_award\Form\InvitationDeleteForm',
      ],
    ],
    'base_table' => 'nata_invitation',
    'entity_keys' => [
      'id' => 'id',
      'uuid' => 'uuid',
    ],
  ]));
}

function nata_award_update_8017() {
  $storage = \Drupal::entityTypeManager()->getStorage('webform_submission');
  $webformSubmissions = $storage->loadByProperties([
    'entity_type' => 'nata_candidate',
  ]);

  if (!empty($webformSubmissions)) {
    foreach ($webformSubmissions as $sub) {
      $candidate = $sub->getSourceEntity();
      $year = current($candidate->year->referencedEntities());
      $forms = $year->forms->referencedEntities();
      $webformId = $sub->webform_id->target_id;
      $shouldUpdate = FALSE;
      foreach ($forms as $form) {
        if ($form->id() == $webformId) {
          $shouldUpdate = TRUE;
          break;
        }
      }
      if ($shouldUpdate) {
        $query = \Drupal::database()->update('webform_submission');
        $query->fields([
          'entity_type' => 'user',
          'entity_id' => $candidate->user->target_id
        ]);
        $query->condition('sid', $sub->id());
        $query->execute();
      }
    }
  }
}
